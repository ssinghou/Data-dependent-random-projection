# -*- coding: utf-8 -*-
"""bcancer_logistic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wt25bmB7R_BCSDlYixWojV1hiZfN-0oc
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

import time


# Load the CSV file into a DataFrame
data_df = pd.read_csv("breast-cancer.csv")

# Convert the DataFrame to a NumPy array
X = data_df.values
label=X[:,1]
X = X[:,2:]

# Define the range of k values
k_values = list(range(2, 15))

avg_accuracy_pca = []
avg_accuracy_ddrp = []

for k in k_values:
    accuracy_pca = []
    accuracy_ddrp = []
    accaracy_rp = []
    for _ in range(20):
      pca = PCA(n_components=k)
      X_train, X_test, X_train_label, X_test_label = train_test_split(X, label, test_size=0.2, random_state=None)
      scaler = StandardScaler()
      scaler.fit(X_train)
      X_train = scaler.transform(X_train)
      X_test = scaler.transform(X_test)
      X_train_pca = pca.fit_transform(X_train)
      X_test_pca = pca.transform(X_test)
      logisticRegr = LogisticRegression(solver='lbfgs')
      logisticRegr.fit(X_train_pca, X_train_label)
      accuracy_pca.append(logisticRegr.score(X_test_pca, X_test_label))

      n, p = X_train.shape
      R = np.zeros((p, k))
      for i in range(k):
        beta = np.random.randn(n)
        R[:, i] = X_train.T @ beta
      T1 = np.matmul(R.T,R)
      T1 = np.linalg.inv(T1)
      T2 = np.matmul(R.T,X_train.T)
      T2 = np.matmul(T1,T2)

      X_train_tilde = np.dot(R, T2)
      X_train_tilde = X_train_tilde.T

      X_train_projected_ddrp = X_train_tilde

      n, p = X_test.shape
      R = np.zeros((p, k))
      for i in range(k):
        beta = np.random.randn(n)
        R[:, i] = X_test.T @ beta
      T1 = np.matmul(R.T,R)
      T1 = np.linalg.inv(T1)
      T2 = np.matmul(R.T,X_test.T)
      T2 = np.matmul(T1,T2)

      X_test_tilde = np.dot(R, T2)
      X_test_tilde = X_test_tilde.T

      X_test_projected_ddrp = X_test_tilde

      logisticRegr.fit(X_train_projected_ddrp, X_train_label)
      accuracy_ddrp.append(logisticRegr.score(X_test_projected_ddrp, X_test_label))

    avg_accuracy_pca.append(np.mean(accuracy_pca))
    avg_accuracy_ddrp.append(np.mean(accuracy_ddrp))



plt.figure(figsize=(12, 8))
plt.plot(k_values, avg_accuracy_pca, marker='o', linestyle='-', label="PCA")
plt.plot(k_values, avg_accuracy_ddrp,marker='x',linestyle='-',label="Original Data dependent random projection")
plt.title('k vs. Accuracy for Different Projection Methods using Logistic Regression')
plt.xlabel('k (Number of Projected Dimensions)')
plt.ylabel('accuracy')
plt.legend()
plt.grid(True)
plt.savefig("extended_v2_rmse_vs_k_comparison.png")
plt.show()
